Question :

Comment modéliser les filières libres ?
	Intégration d'un éditeur de filière

Que faire du cas des UV de filières qui peuvent être des TM pour certains, et des CS pour d'autres ?
	Il faut l'implémenter


===========================
Algo de recherche des UV :
Fonction d'auto-complétion

Il faudrait avant tout essayer de catégoriser et de hiérarchiser les différentes conditions pour le choix des UV :
Obligatoire pour la branche
Obligatoire pour la filière
Prise en compte des X ECTS manquants en CS
Prise en compte des X ECTS manquants en TM
Prise en compte des X ECTS manquants en TSH
Prise en compte des deux semestres de stage pendant lesquels aucune UV ne peut être réalisée

Il faudra connaître tous les PCB, tous les PCF (entrés grâce à l'éditeur de filière et sauvegardés)

Mettre un système de voeux et de rejet, càd attribuer un coefficient à chaque UV (de -2 à +2 ) ?

-2 Ne veut absolument pas être inscrit à cette UV
-1 Voudrait si possible ne pas être inscrit à cette UV
0  Neutre (Valeur pas défaut)
+1 Voudrait si possible s'inscrire à cette UV
+2 Veut absolument faire cette UV

Dans un cas de conflit entre les voeux de l'utilisateur et les CN d'obtention du diplôme (en un nombre de semestres raisonnable), le programme doit l'indiquer.
(Cela peut alors arriver dans les cas de notations de valeurs +2 et -2).


Par ailleurs, il doit pouvoir s'adapter à mise à jour du système d'UV (rajout d'une catégorie, UV qui donnent des ECTS dans plusieurs catégories).

Comment prendre en compte le système de 'grille de validation' de la branche TSH ? Il n'y a pas une solution possible
	En l'état actuel des choses, il s'agit d'un système 2 lignes sur 3, 2 colonnes sur 2.
	Peut-on implémenter un système ((X colonnes parmi A) ET (Y lignes parmi B) ET (listeDesColonnesObligatoires) ET (listesDesLignesObligatoires) ET (listesDesUvObligatoires))

140517 : 
Création d'une classe autocompletion ou bien simple méthode de la classe étudiant ?
Dans le cas d'une classe autocomplétion, est-ce qu'un étudiant agrège une autocompletion ?
Design Pattern Singleton ?
Design pattern Strategy ? -> Car de nouvelles méthodes de complétion doivent pouvoir être implémentées
Ou bien doivent-elles être implémentées dans les prédicats ? NON -> C'est l'algo en lui-même qui doit pouvoir être modifié ->
Classe abstraite ou Strategy ?
Classe abstraite ET Strategy

Auto-completion pour le semestre à venir uniquement ? ou bien pour tous les semestres que doit encore effectuer l'étudiant ?
-> Tous les semestres (Hors TN09 et TN10 + semestres à l'étranger)
Demander à l'utilisateur quel(s) semestre(s) sont potentiellement effectués hors de l'UTC
Renvoyer le semestre potentiel d'obtention du diplome correspondant

N'a-t-on pas intérêt à créer une classe dossier, ou bien Cursus suffit-elle à elle eule à contenir toutes les infos nécessaires ?


140519 : 
Il faut trouver ici le moyen de realiser la connexion avec la barre de recherche qui sera implémentée dans l'interface graphique
il faut exploiter le comportement de signaux et de slots de tout QObject : 2 possibilités : 
	Dériver la classe StrategieAutocompletion d'un QObject, ou bien créer un lien d'agrégation, voire de composition entre mainwindow et StrategieAutocompletion

Choix de l'agrégation ?
Ne 
Mettre en place
 






=============================

Voici le format de fichier que je propose pour le stockage des données, c'est du XML : 

<SectionUV>
	<uv>
		<code>LO21</code>
		<nom>Programmation orienté objet</nom>
		<credit type="TM">6</credit> <!-- Si il y a plus d'un type de crédit (ex : UV équivalence (EQ01 pour le sigle :) ) on créer une UV du type UV plusieur catégorie -->
		<branche>GI</branche>
	</uv>
	...
</SectionUV>
<SectionBranche>
	<branche>
		<sigle>GI</sigle>
		<nom>Génie informatique</nom>
		<PCB>GI_PCB</PCB>
		<PSF>GI_FDD</PSF>
		<PSF>GI_ADEL</PSF>
		...
	</branche>
	...
</SectionBranche>
<SectionProfil>
	<profil>
		<nom>TC_PCB</nom>
		
		<predicat type="1"> <!-- Le type 1 est par exemple PredicatMinimumCreditInCategory (DP : Factory grace au type) -->
			<donnee>CS</donnee>
			<donnee>48</donnee>
		</predicat>
		<predicat type="1">
			<donnee>TM</donnee>
			<donnee>24</donnee>
		</predicat>
		<predicat type="1">
			<donnee>TSH</donnee>
			<donnee>24</donnee>
		</predicat>
		<predicat type="1">
			<donnee>SP</donnee>
			<donnee>6</donnee>
		</predicat>
	</profil>
	...
</SectionProfil>
<Etudiant>
	<prenom>Jean-Pierre</prenom>
	<nom>Merguez</nom>
	...
</Etudiant>

Du coup, je pense qu'il faut généraliser la clase UVManager et la transformer en UTManager par exemple pour faire en sorte que ça soit elle qui s'occupe de tout.

===========

Slot dans l'autocomplétion avec en paramètre ce qui a été écrit dans la barre de recherche, la classe doit pouvoir retrouver une liste d'UV favorables (en prenant en compte l'objet étudiant qu'elle agrège).

=================

Génération de la fin du Cursus

Classer les UV à l'aide des prédicats
	Eliminer toute les UVs qui ne sont pas enseigné pour la branche actuelle
	Mettre en premier les UV de la listes qui absolument voulue.
	Puis les UV obligatoire (prédicat)
	Puis les UV de preférence +1
	Les UV neutre
	Les UV -1
	Le reste (-2)
	
Pour chaque uv_i dans UV_candidate
	Si uv_i a déjé été selectionnée
		continuer
		
	Pour chaque prédicat de chaque Profil
		Si le prédicat n'est pas valider avec la liste actuelle de candidat alors
			Si l'UV améliore le cursus alors
				Ajouter l'uv à la liste des candidat et continuer
			Sinon
				continuer
			Fin si
		Sinon
			continuer
		Fin si
	Fin pour
Fin Pour
